services:
  app:
    build: .
    depends_on:
      migrate:
        condition: service_completed_successfully
        restart: true
    environment:
      DATABASE_URL: ${DATABASE_URL_APP}
      PORT: ${PORT}
    ports:
      - "8080:8080"
    networks:
      - app-network
    command: ["./server"]

  db:
    image: postgres:17
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      MIGRATIONS_PASSWORD: ${MIGRATIONS_PASSWORD}
      SUNNY_PASSWORD: ${SUNNY_PASSWORD}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_USERNAME: ${SMTP_USERNAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 3
      start_period: 30s
      timeout: 10s
    networks:
      - app-network
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres-data:/var/lib/postgresql/data

  migrate:
    build:
      context: .
      dockerfile: Dockerfile.migrate
    environment:
      - DATABASE_URL=postgres://migrations:${MIGRATIONS_PASSWORD}@db:5432/${DB_NAME}?sslmode=disable
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    command: ["-command", "up"]

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
